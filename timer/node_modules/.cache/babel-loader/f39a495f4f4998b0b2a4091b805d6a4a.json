{"ast":null,"code":"var _jsxFileName = \"D:\\\\Beginner\\\\React-JS-BeginnerTasks\\\\timer\\\\src\\\\page\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout\";\nimport Timer from \"../components/timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst date = new Date();\nconst initialSettings = {\n  currentHours: date.getHours(),\n  currentMinutes: date.getMinutes(),\n  currentSeconds: date.getSeconds()\n};\n\nconst TimerPage = () => {\n  _s();\n\n  const [hours, setHours] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [timer, setTimer] = useState(date);\n  const {\n    currentHours,\n    currentMinutes,\n    currentSeconds\n  } = initialSettings;\n  useEffect(() => {\n    setHours(currentHours);\n    setMinutes(currentMinutes);\n    setSeconds(currentSeconds);\n  }, []);\n  useEffect(() => {\n    //Timers\n    const tickTimer = setInterval(() => {\n      setTimer(new Date(+timer - 1));\n    }, 1000); // const hoursTimer = setInterval(() => {\n    //   setHours(hours - 1);\n    // }, 3600000);\n    // const minutesTimer = setInterval(() => {\n    //   setMinutes(minutes - 1);\n    // }, 60000);\n    // const secondsTimer = setInterval(() => {\n    //   setSeconds(seconds);\n    // }, 1000);\n    // const dateTimer = setInterval((date) => {\n    //   // setSeconds(+prevDate - 1);\n    // }, 1000);\n    // //Condition to clear\n    // if (!hours) clearInterval(hoursTimer);\n    // if (!minutes) clearInterval(minutesTimer);\n    // if (!seconds) clearInterval(secondsTimer);\n  }, [timer]);\n  const settings = {\n    currentHours: hours,\n    currentMinutes: minutes,\n    currentSeconds: seconds\n  };\n\n  const onTimerCompleted = () => {\n    !hours && !minutes && !seconds && console.log(\"Boom!\");\n  };\n\n  onTimerCompleted();\n\n  const updateTimer = () => {\n    setHours(currentHours);\n    setMinutes(currentMinutes);\n    setSeconds(currentSeconds);\n  };\n\n  const pauseTimer = () => {};\n\n  const resetTimer = () => {\n    setHours(0);\n    setMinutes(0);\n    setSeconds(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Timer, {\n      settings: settings,\n      timer: timer,\n      updateTimer: updateTimer,\n      onComplete: resetTimer,\n      children: (hours, minutes, seconds) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: hours\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minutes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: seconds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TimerPage, \"I/cDT6lDyw7o2NJNFH5sPTf+bQw=\");\n\n_c = TimerPage;\nexport default TimerPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerPage\");","map":{"version":3,"sources":["D:/Beginner/React-JS-BeginnerTasks/timer/src/page/index.tsx"],"names":["React","useEffect","useState","Layout","Timer","date","Date","initialSettings","currentHours","getHours","currentMinutes","getMinutes","currentSeconds","getSeconds","TimerPage","hours","setHours","minutes","setMinutes","seconds","setSeconds","timer","setTimer","tickTimer","setInterval","settings","onTimerCompleted","console","log","updateTimer","pauseTimer","resetTimer"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { ComponentProps, Settings } from \"./types\";\r\n\r\nimport Layout from \"../components/layout\";\r\nimport Timer from \"../components/timer\";\r\n\r\nconst date = new Date();\r\n\r\nconst initialSettings: Settings = {\r\n  currentHours: date.getHours(),\r\n  currentMinutes: date.getMinutes(),\r\n  currentSeconds: date.getSeconds(),\r\n};\r\n\r\nconst TimerPage: React.FC<ComponentProps> = () => {\r\n  const [hours, setHours] = useState(0);\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  const [timer, setTimer] = useState(date);\r\n\r\n  const { currentHours, currentMinutes, currentSeconds } = initialSettings;\r\n\r\n  useEffect(() => {\r\n    setHours(currentHours);\r\n    setMinutes(currentMinutes);\r\n    setSeconds(currentSeconds);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //Timers\r\n\r\n    const tickTimer = setInterval(() => {\r\n      setTimer(new Date(+timer - 1));\r\n    }, 1000);\r\n    // const hoursTimer = setInterval(() => {\r\n    //   setHours(hours - 1);\r\n    // }, 3600000);\r\n\r\n    // const minutesTimer = setInterval(() => {\r\n    //   setMinutes(minutes - 1);\r\n    // }, 60000);\r\n\r\n    // const secondsTimer = setInterval(() => {\r\n    //   setSeconds(seconds);\r\n    // }, 1000);\r\n\r\n    // const dateTimer = setInterval((date) => {\r\n    //   // setSeconds(+prevDate - 1);\r\n    // }, 1000);\r\n\r\n    // //Condition to clear\r\n    // if (!hours) clearInterval(hoursTimer);\r\n    // if (!minutes) clearInterval(minutesTimer);\r\n    // if (!seconds) clearInterval(secondsTimer);\r\n  }, [timer]);\r\n\r\n  const settings: Settings = {\r\n    currentHours: hours,\r\n    currentMinutes: minutes,\r\n    currentSeconds: seconds,\r\n  };\r\n\r\n  const onTimerCompleted = (): void => {\r\n    !hours && !minutes && !seconds && console.log(\"Boom!\");\r\n  };\r\n\r\n  onTimerCompleted();\r\n\r\n  const updateTimer = (): void => {\r\n    setHours(currentHours);\r\n    setMinutes(currentMinutes);\r\n    setSeconds(currentSeconds);\r\n  };\r\n\r\n  const pauseTimer = (): void => {};\r\n\r\n  const resetTimer = (): void => {\r\n    setHours(0);\r\n    setMinutes(0);\r\n    setSeconds(0);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <Timer\r\n        settings={settings}\r\n        timer={timer}\r\n        updateTimer={updateTimer}\r\n        onComplete={resetTimer}\r\n      >\r\n        {(hours: number, minutes: number, seconds: number) => (\r\n          <>\r\n            <span>{hours}</span>\r\n            <span>{minutes}</span>\r\n            <span>{seconds}</span>\r\n          </>\r\n        )}\r\n      </Timer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TimerPage;\r\n"]},"metadata":{},"sourceType":"module"}