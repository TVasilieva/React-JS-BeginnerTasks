{"ast":null,"code":"var _jsxFileName = \"D:\\\\Beginner\\\\React-JS-BeginnerTasks\\\\timer\\\\src\\\\page\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Layout from \"../components/layout\";\nimport Timer from \"../components/timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst date = new Date(\"2020-01-01 00:00:08\");\n\nconst TimerPage = () => {\n  _s();\n\n  const [timer, setTimer] = useState(date);\n  let tickTimer = useRef();\n  useEffect(() => {\n    setTimer(date);\n  }, []);\n\n  const startTimer = () => {\n    tickTimer = setInterval(() => {\n      if (!timer.getHours() && !timer.getMinutes() && !timer.getSeconds()) {\n        clearInterval(tickTimer.current);\n      } else {\n        setTimer(timer => new Date(+timer - 1));\n      }\n    }, 1000);\n  };\n\n  useEffect(() => {\n    startTimer();\n    return () => {\n      clearInterval(tickTimer.current);\n    };\n  });\n\n  const updateTimer = () => {\n    setTimer(date);\n  };\n\n  const pauseTimer = () => {\n    console.log(\"PAUSE\");\n  };\n\n  const resetTimer = () => {\n    setTimer(new Date(new Date().setHours(0, 0, 0)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Timer, {\n      settings: timer,\n      updateTimer: updateTimer,\n      pauseTimer: pauseTimer,\n      onComplete: resetTimer,\n      children: (hours, minutes, seconds) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: hours\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minutes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: seconds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TimerPage, \"LtiL9ZFlAAP2hV94qMeR6KCZrjA=\");\n\n_c = TimerPage;\nexport default TimerPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerPage\");","map":{"version":3,"sources":["D:/Beginner/React-JS-BeginnerTasks/timer/src/page/index.tsx"],"names":["React","useEffect","useRef","useState","Layout","Timer","date","Date","TimerPage","timer","setTimer","tickTimer","startTimer","setInterval","getHours","getMinutes","getSeconds","clearInterval","current","updateTimer","pauseTimer","console","log","resetTimer","setHours","hours","minutes","seconds"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AAIA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAEA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,qBAAT,CAAb;;AAEA,MAAMC,SAAmC,GAAG,MAAM;AAAA;;AAChD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACG,IAAD,CAAlC;AAEA,MAAIK,SAAS,GAAGT,MAAM,EAAtB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,QAAQ,CAACJ,IAAD,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMM,UAAU,GAAG,MAAY;AAC7BD,IAAAA,SAAS,GAAGE,WAAW,CAAC,MAAM;AAC5B,UAAI,CAACJ,KAAK,CAACK,QAAN,EAAD,IAAqB,CAACL,KAAK,CAACM,UAAN,EAAtB,IAA4C,CAACN,KAAK,CAACO,UAAN,EAAjD,EAAqE;AACnEC,QAAAA,aAAa,CAACN,SAAS,CAACO,OAAX,CAAb;AACD,OAFD,MAEO;AACLR,QAAAA,QAAQ,CAAED,KAAD,IAAW,IAAIF,IAAJ,CAAS,CAACE,KAAD,GAAS,CAAlB,CAAZ,CAAR;AACD;AACF,KANsB,EAMpB,IANoB,CAAvB;AAOD,GARD;;AAUAR,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,UAAU;AACV,WAAO,MAAM;AACXK,MAAAA,aAAa,CAACN,SAAS,CAACO,OAAX,CAAb;AACD,KAFD;AAGD,GALQ,CAAT;;AAOA,QAAMC,WAAW,GAAG,MAAY;AAC9BT,IAAAA,QAAQ,CAACJ,IAAD,CAAR;AACD,GAFD;;AAIA,QAAMc,UAAU,GAAG,MAAY;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,GAFD;;AAIA,QAAMC,UAAU,GAAG,MAAY;AAC7Bb,IAAAA,QAAQ,CAAC,IAAIH,IAAJ,CAAS,IAAIA,IAAJ,GAAWiB,QAAX,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAAT,CAAD,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,MAAD;AAAA,2BACE,QAAC,KAAD;AACE,MAAA,QAAQ,EAAEf,KADZ;AAEE,MAAA,WAAW,EAAEU,WAFf;AAGE,MAAA,UAAU,EAAEC,UAHd;AAIE,MAAA,UAAU,EAAEG,UAJd;AAAA,gBAMG,CAACE,KAAD,EAAgBC,OAAhB,EAAiCC,OAAjC,kBACC;AAAA,gCACE;AAAA,oBAAOF;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAxDD;;GAAMnB,S;;KAAAA,S;AA0DN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { ComponentProps } from \"./types\";\r\n\r\nimport Layout from \"../components/layout\";\r\nimport Timer from \"../components/timer\";\r\n\r\nconst date = new Date(\"2020-01-01 00:00:08\");\r\n\r\nconst TimerPage: React.FC<ComponentProps> = () => {\r\n  const [timer, setTimer] = useState(date);\r\n\r\n  let tickTimer = useRef();\r\n\r\n  useEffect(() => {\r\n    setTimer(date);\r\n  }, []);\r\n\r\n  const startTimer = (): void => {\r\n    tickTimer = setInterval(() => {\r\n      if (!timer.getHours() && !timer.getMinutes() && !timer.getSeconds()) {\r\n        clearInterval(tickTimer.current);\r\n      } else {\r\n        setTimer((timer) => new Date(+timer - 1));\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    startTimer();\r\n    return () => {\r\n      clearInterval(tickTimer.current);\r\n    };\r\n  });\r\n\r\n  const updateTimer = (): void => {\r\n    setTimer(date);\r\n  };\r\n\r\n  const pauseTimer = (): void => {\r\n    console.log(\"PAUSE\");\r\n  };\r\n\r\n  const resetTimer = (): void => {\r\n    setTimer(new Date(new Date().setHours(0, 0, 0)));\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <Timer\r\n        settings={timer}\r\n        updateTimer={updateTimer}\r\n        pauseTimer={pauseTimer}\r\n        onComplete={resetTimer}\r\n      >\r\n        {(hours: number, minutes: number, seconds: number) => (\r\n          <>\r\n            <span>{hours}</span>\r\n            <span>{minutes}</span>\r\n            <span>{seconds}</span>\r\n          </>\r\n        )}\r\n      </Timer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TimerPage;\r\n"]},"metadata":{},"sourceType":"module"}