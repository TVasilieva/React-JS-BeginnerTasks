{"ast":null,"code":"var _jsxFileName = \"D:\\\\Beginner\\\\React-JS-BeginnerTasks\\\\timer\\\\src\\\\page\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout\";\nimport Timer from \"../components/timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst date = new Date(); // const initialSettings: Settings = {\n//   currentHours: date.getHours(),\n//   currentMinutes: date.getMinutes(),\n//   currentSeconds: date.getSeconds(),\n// };\n\nconst TimerPage = () => {\n  _s();\n\n  // const [hours, setHours] = useState(0);\n  // const [minutes, setMinutes] = useState(0);\n  // const [seconds, setSeconds] = useState(0);\n  const [timer, setTimer] = useState(date); // const { currentHours, currentMinutes, currentSeconds } = initialSettings;\n\n  useEffect(() => {\n    // setHours(currentHours);\n    // setMinutes(currentMinutes);\n    // setSeconds(currentSeconds);\n    setTimer(date);\n  }, []);\n  useEffect(() => {\n    //Timers\n    const tickTimer = setInterval(() => {\n      setTimer(new Date(+timer - 1));\n    }, 1000); // const hoursTimer = setInterval(() => {\n    //   setHours(hours - 1);\n    // }, 3600000);\n    // const minutesTimer = setInterval(() => {\n    //   setMinutes(minutes - 1);\n    // }, 60000);\n    // const secondsTimer = setInterval(() => {\n    //   setSeconds(seconds);\n    // }, 1000);\n    // const dateTimer = setInterval((date) => {\n    //   // setSeconds(+prevDate - 1);\n    // }, 1000);\n    // //Condition to clear\n    // if (!hours) clearInterval(hoursTimer);\n    // if (!minutes) clearInterval(minutesTimer);\n    // if (!seconds) clearInterval(secondsTimer);\n  }, [timer]);\n  const settings = {\n    // currentHours: hours,\n    // currentMinutes: minutes,\n    // currentSeconds: seconds,\n    timer: timer\n  }; // const onTimerCompleted = (): void => {\n  //   !hours && !minutes && !seconds && console.log(\"Boom!\");\n  // };\n  // onTimerCompleted();\n\n  const updateTimer = () => {// setHours(currentHours);\n    // setMinutes(currentMinutes);\n    // setSeconds(currentSeconds);\n  };\n\n  const pauseTimer = () => {};\n\n  const resetTimer = () => {\n    // setHours(0);\n    // setMinutes(0);\n    // setSeconds(0);\n    setTimer(new Date(new Date().setHours(0, 0, 0, 0)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Timer, {\n      settings: settings,\n      timer: timer,\n      updateTimer: updateTimer,\n      onComplete: resetTimer,\n      children: (hours, minutes, seconds) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: hours\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minutes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: seconds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TimerPage, \"8B+ischwyVPCwtSOARN8zjOoois=\");\n\n_c = TimerPage;\nexport default TimerPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerPage\");","map":{"version":3,"sources":["D:/Beginner/React-JS-BeginnerTasks/timer/src/page/index.tsx"],"names":["React","useEffect","useState","Layout","Timer","date","Date","TimerPage","timer","setTimer","tickTimer","setInterval","settings","updateTimer","pauseTimer","resetTimer","setHours","hours","minutes","seconds"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAAmCC,QAAnC,QAAmD,OAAnD;AAIA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAEA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAmC,GAAG,MAAM;AAAA;;AAChD;AACA;AACA;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACG,IAAD,CAAlC,CALgD,CAOhD;;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACAQ,IAAAA,QAAQ,CAACJ,IAAD,CAAR;AACD,GALQ,EAKN,EALM,CAAT;AAOAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AAEA,UAAMS,SAAS,GAAGC,WAAW,CAAC,MAAM;AAClCF,MAAAA,QAAQ,CAAC,IAAIH,IAAJ,CAAS,CAACE,KAAD,GAAS,CAAlB,CAAD,CAAR;AACD,KAF4B,EAE1B,IAF0B,CAA7B,CAHc,CAMd;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD,GA1BQ,EA0BN,CAACA,KAAD,CA1BM,CAAT;AA4BA,QAAMI,QAAa,GAAG;AACpB;AACA;AACA;AACAJ,IAAAA,KAAK,EAAEA;AAJa,GAAtB,CA5CgD,CAmDhD;AACA;AACA;AAEA;;AAEA,QAAMK,WAAW,GAAG,MAAY,CAC9B;AACA;AACA;AACD,GAJD;;AAMA,QAAMC,UAAU,GAAG,MAAY,CAAE,CAAjC;;AAEA,QAAMC,UAAU,GAAG,MAAY;AAC7B;AACA;AACA;AACAN,IAAAA,QAAQ,CAAC,IAAIH,IAAJ,CAAS,IAAIA,IAAJ,GAAWU,QAAX,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAT,CAAD,CAAR;AACD,GALD;;AAOA,sBACE,QAAC,MAAD;AAAA,2BACE,QAAC,KAAD;AACE,MAAA,QAAQ,EAAEJ,QADZ;AAEE,MAAA,KAAK,EAAEJ,KAFT;AAGE,MAAA,WAAW,EAAEK,WAHf;AAIE,MAAA,UAAU,EAAEE,UAJd;AAAA,gBAMG,CAACE,KAAD,EAAgBC,OAAhB,EAAiCC,OAAjC,kBACC;AAAA,gCACE;AAAA,oBAAOF;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA1FD;;GAAMZ,S;;KAAAA,S;AA4FN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { ComponentProps, Settings } from \"./types\";\r\n\r\nimport Layout from \"../components/layout\";\r\nimport Timer from \"../components/timer\";\r\n\r\nconst date = new Date();\r\n\r\n// const initialSettings: Settings = {\r\n//   currentHours: date.getHours(),\r\n//   currentMinutes: date.getMinutes(),\r\n//   currentSeconds: date.getSeconds(),\r\n// };\r\n\r\nconst TimerPage: React.FC<ComponentProps> = () => {\r\n  // const [hours, setHours] = useState(0);\r\n  // const [minutes, setMinutes] = useState(0);\r\n  // const [seconds, setSeconds] = useState(0);\r\n\r\n  const [timer, setTimer] = useState(date);\r\n\r\n  // const { currentHours, currentMinutes, currentSeconds } = initialSettings;\r\n\r\n  useEffect(() => {\r\n    // setHours(currentHours);\r\n    // setMinutes(currentMinutes);\r\n    // setSeconds(currentSeconds);\r\n    setTimer(date);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //Timers\r\n\r\n    const tickTimer = setInterval(() => {\r\n      setTimer(new Date(+timer - 1));\r\n    }, 1000);\r\n    // const hoursTimer = setInterval(() => {\r\n    //   setHours(hours - 1);\r\n    // }, 3600000);\r\n\r\n    // const minutesTimer = setInterval(() => {\r\n    //   setMinutes(minutes - 1);\r\n    // }, 60000);\r\n\r\n    // const secondsTimer = setInterval(() => {\r\n    //   setSeconds(seconds);\r\n    // }, 1000);\r\n\r\n    // const dateTimer = setInterval((date) => {\r\n    //   // setSeconds(+prevDate - 1);\r\n    // }, 1000);\r\n\r\n    // //Condition to clear\r\n    // if (!hours) clearInterval(hoursTimer);\r\n    // if (!minutes) clearInterval(minutesTimer);\r\n    // if (!seconds) clearInterval(secondsTimer);\r\n  }, [timer]);\r\n\r\n  const settings: any = {\r\n    // currentHours: hours,\r\n    // currentMinutes: minutes,\r\n    // currentSeconds: seconds,\r\n    timer: timer,\r\n  };\r\n\r\n  // const onTimerCompleted = (): void => {\r\n  //   !hours && !minutes && !seconds && console.log(\"Boom!\");\r\n  // };\r\n\r\n  // onTimerCompleted();\r\n\r\n  const updateTimer = (): void => {\r\n    // setHours(currentHours);\r\n    // setMinutes(currentMinutes);\r\n    // setSeconds(currentSeconds);\r\n  };\r\n\r\n  const pauseTimer = (): void => {};\r\n\r\n  const resetTimer = (): void => {\r\n    // setHours(0);\r\n    // setMinutes(0);\r\n    // setSeconds(0);\r\n    setTimer(new Date(new Date().setHours(0, 0, 0, 0)));\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <Timer\r\n        settings={settings}\r\n        timer={timer}\r\n        updateTimer={updateTimer}\r\n        onComplete={resetTimer}\r\n      >\r\n        {(hours: number, minutes: number, seconds: number) => (\r\n          <>\r\n            <span>{hours}</span>\r\n            <span>{minutes}</span>\r\n            <span>{seconds}</span>\r\n          </>\r\n        )}\r\n      </Timer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TimerPage;\r\n"]},"metadata":{},"sourceType":"module"}