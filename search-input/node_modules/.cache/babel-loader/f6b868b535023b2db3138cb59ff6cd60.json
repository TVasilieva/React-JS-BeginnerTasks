{"ast":null,"code":"var _jsxFileName = \"D:\\\\Beginner\\\\React-JS-BeginnerTasks\\\\search-input\\\\src\\\\components\\\\Controlled input\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport \"./style.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ControlledInput = _ref => {\n  _s();\n\n  let {\n    data,\n    mode\n  } = _ref;\n  const [filter, setFilter] = React.useState(\"\");\n  useEffect(() => {\n    const getData = async () => {\n      let res = await fetch(`https://api.cool.com/q=${filter}`);\n      let val = await res.json();\n    }; // Function launches after 1.5 seconds (1500 ms) of the last keystroke\n    // On first render you don't want to launch anything\n    // Thus, you check if the user typed a query at first\n\n\n    let timer = setTimeout(() => {\n      if (filter) getData();\n    }, 1500); // If useEffect() relaunches, you clear the function\n    // That means, the previous function won't launch\n    // Thus, won't send a request to the API\n\n    return () => clearTimeout(timer);\n  }, [filter]);\n\n  const searchItem = filter => e => {\n    e.preventDefault();\n    console.log(data.filter(e => e.title.toLowerCase().includes(filter.toLowerCase())));\n  };\n\n  const handleChange = e => {\n    setFilter(e.target.value);\n  };\n\n  const dataOptions = data.map(e => {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: e.title\n    }, Math.random() * Math.random(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"controlled-form\",\n    onSubmit: searchItem(filter),\n    onKeyPress: mode,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      list: \"browsers\",\n      className: \"controlled-input\",\n      onChange: handleChange,\n      value: filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"browsers\",\n      children: dataOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"controlled-button\",\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ControlledInput, \"Bm/W2zWS8nZvrSJlqzzCazREDnw=\");\n\n_c = ControlledInput;\nexport default ControlledInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControlledInput\");","map":{"version":3,"sources":["D:/Beginner/React-JS-BeginnerTasks/search-input/src/components/Controlled input/index.tsx"],"names":["React","useEffect","ControlledInput","data","mode","filter","setFilter","useState","getData","res","fetch","val","json","timer","setTimeout","clearTimeout","searchItem","e","preventDefault","console","log","title","toLowerCase","includes","handleChange","target","value","dataOptions","map","Math","random"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAIA,OAAO,cAAP;;;AAGA,MAAMC,eAAyC,GAAG,QAAoB;AAAA;;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;AACpE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACO,QAAN,CAAuB,EAAvB,CAA5B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,OAAO,GAAG,YAAY;AAC1B,UAAIC,GAAG,GAAG,MAAMC,KAAK,CAAE,0BAAyBL,MAAO,EAAlC,CAArB;AACA,UAAIM,GAAG,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAhB;AACD,KAHD,CADc,CAMd;AACA;AACA;;;AACA,QAAIC,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC3B,UAAIT,MAAJ,EAAYG,OAAO;AACpB,KAFqB,EAEnB,IAFmB,CAAtB,CATc,CAad;AACA;AACA;;AACA,WAAO,MAAMO,YAAY,CAACF,KAAD,CAAzB;AACD,GAjBQ,EAiBN,CAACR,MAAD,CAjBM,CAAT;;AAmBA,QAAMW,UAAU,GACbX,MAAD,IACCY,CAAD,IAAkB;AAChBA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CACEjB,IAAI,CAACE,MAAL,CAAaY,CAAD,IAAOA,CAAC,CAACI,KAAF,CAAQC,WAAR,GAAsBC,QAAtB,CAA+BlB,MAAM,CAACiB,WAAP,EAA/B,CAAnB,CADF;AAGD,GAPH;;AASA,QAAME,YAAY,GAAIP,CAAD,IAAkB;AACrCX,IAAAA,SAAS,CAACW,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAT;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAGxB,IAAI,CAACyB,GAAL,CAAUX,CAAD,IAAwB;AACnD,wBAAO;AAAQ,MAAA,KAAK,EAAEA,CAAC,CAACI;AAAjB,OAA6BQ,IAAI,CAACC,MAAL,KAAgBD,IAAI,CAACC,MAAL,EAA7C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFmB,CAApB;AAIA,sBACE;AACE,IAAA,SAAS,EAAC,iBADZ;AAEE,IAAA,QAAQ,EAAEd,UAAU,CAACX,MAAD,CAFtB;AAGE,IAAA,UAAU,EAAED,IAHd;AAAA,4BAKE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,SAAS,EAAC,kBAFZ;AAGE,MAAA,QAAQ,EAAEoB,YAHZ;AAIE,MAAA,KAAK,EAAEnB;AAJT;AAAA;AAAA;AAAA;AAAA,YALF,eAWE;AAAU,MAAA,EAAE,EAAC,UAAb;AAAA,gBAAyBsB;AAAzB;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAvDD;;GAAMzB,e;;KAAAA,e;AAyDN,eAAeA,eAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport { top100FilmsType } from \"../../data\";\r\n\r\nimport \"./style.scss\";\r\nimport { ComponentProps } from \"./types\";\r\n\r\nconst ControlledInput: React.FC<ComponentProps> = ({ data, mode }) => {\r\n  const [filter, setFilter] = React.useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      let res = await fetch(`https://api.cool.com/q=${filter}`);\r\n      let val = await res.json();\r\n    };\r\n\r\n    // Function launches after 1.5 seconds (1500 ms) of the last keystroke\r\n    // On first render you don't want to launch anything\r\n    // Thus, you check if the user typed a query at first\r\n    let timer = setTimeout(() => {\r\n      if (filter) getData();\r\n    }, 1500);\r\n\r\n    // If useEffect() relaunches, you clear the function\r\n    // That means, the previous function won't launch\r\n    // Thus, won't send a request to the API\r\n    return () => clearTimeout(timer);\r\n  }, [filter]);\r\n\r\n  const searchItem =\r\n    (filter: string) =>\r\n    (e: any): void => {\r\n      e.preventDefault();\r\n      console.log(\r\n        data.filter((e) => e.title.toLowerCase().includes(filter.toLowerCase()))\r\n      );\r\n    };\r\n\r\n  const handleChange = (e: any): void => {\r\n    setFilter(e.target.value);\r\n  };\r\n\r\n  const dataOptions = data.map((e: top100FilmsType) => {\r\n    return <option value={e.title} key={Math.random() * Math.random()} />;\r\n  });\r\n\r\n  return (\r\n    <form\r\n      className=\"controlled-form\"\r\n      onSubmit={searchItem(filter)}\r\n      onKeyPress={mode}\r\n    >\r\n      <input\r\n        list=\"browsers\"\r\n        className=\"controlled-input\"\r\n        onChange={handleChange}\r\n        value={filter}\r\n      />\r\n      <datalist id=\"browsers\">{dataOptions}</datalist>\r\n      <button className=\"controlled-button\">Search</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ControlledInput;\r\n"]},"metadata":{},"sourceType":"module"}