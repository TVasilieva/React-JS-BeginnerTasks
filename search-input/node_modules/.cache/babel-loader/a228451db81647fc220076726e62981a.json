{"ast":null,"code":"var _jsxFileName = \"D:\\\\Beginner\\\\React-JS-BeginnerTasks\\\\search-input\\\\src\\\\components\\\\MUI Input\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\n\nconst MUIInput = _ref => {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const [value, setValue] = React.useState(null);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    value: value,\n    sx: {\n      width: \"48%\"\n    },\n    onChange: (event, newValue) => {\n      if (typeof newValue === \"string\") {\n        setValue({\n          title: newValue\n        });\n      } else if (newValue && newValue.inputValue) {\n        setValue({\n          title: newValue.inputValue\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params);\n      const {\n        inputValue\n      } = params;\n      const isExisting = options.some(option => inputValue === option.title);\n\n      if (inputValue !== \"\" && !isExisting) {\n        filtered.push({\n          inputValue,\n          title: `Add \"${inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    id: \"free-solo-with-text-demo\",\n    options: data,\n    getOptionLabel: option => {\n      if (typeof option === \"string\") {\n        return option;\n      }\n\n      if (option.inputValue) {\n        return option.inputValue;\n      }\n\n      return option.title;\n    },\n    renderOption: (props, option) => /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n      children: option.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 40\n    }, this),\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Free solo with text demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MUIInput, \"EEjdpY/CSe7/lDQurV9yi1RbKSs=\");\n\n_c = MUIInput;\nexport default MUIInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"MUIInput\");","map":{"version":3,"sources":["D:/Beginner/React-JS-BeginnerTasks/search-input/src/components/MUI Input/index.tsx"],"names":["React","TextField","Autocomplete","createFilterOptions","filter","MUIInput","data","value","setValue","useState","width","event","newValue","title","inputValue","options","params","filtered","isExisting","some","option","push","props"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,IAAuBC,mBAAvB,QAAkD,4BAAlD;AAEA,OAAO,SAAP;;AAGA,MAAMC,MAAM,GAAGD,mBAAmB,EAAlC;;AAEA,MAAME,QAAkC,GAAG,QAAc;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACvD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,KAAK,CAACS,QAAN,CAAoB,IAApB,CAA1B;AAEA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEF,KADT;AAEE,IAAA,EAAE,EAAE;AACFG,MAAAA,KAAK,EAAE;AADL,KAFN;AAKE,IAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7B,UAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCJ,QAAAA,QAAQ,CAAC;AACPK,UAAAA,KAAK,EAAED;AADA,SAAD,CAAR;AAGD,OAJD,MAIO,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,UAAzB,EAAqC;AAC1CN,QAAAA,QAAQ,CAAC;AACPK,UAAAA,KAAK,EAAED,QAAQ,CAACE;AADT,SAAD,CAAR;AAGD,OAJM,MAIA;AACLN,QAAAA,QAAQ,CAACI,QAAD,CAAR;AACD;AACF,KAjBH;AAkBE,IAAA,aAAa,EAAE,CAACG,OAAD,EAAUC,MAAV,KAAqB;AAClC,YAAMC,QAAQ,GAAGb,MAAM,CAACW,OAAD,EAAUC,MAAV,CAAvB;AAEA,YAAM;AAAEF,QAAAA;AAAF,UAAiBE,MAAvB;AACA,YAAME,UAAU,GAAGH,OAAO,CAACI,IAAR,CAChBC,MAAD,IAAYN,UAAU,KAAKM,MAAM,CAACP,KADjB,CAAnB;;AAGA,UAAIC,UAAU,KAAK,EAAf,IAAqB,CAACI,UAA1B,EAAsC;AACpCD,QAAAA,QAAQ,CAACI,IAAT,CAAc;AACZP,UAAAA,UADY;AAEZD,UAAAA,KAAK,EAAG,QAAOC,UAAW;AAFd,SAAd;AAID;;AAED,aAAOG,QAAP;AACD,KAjCH;AAkCE,IAAA,aAAa,MAlCf;AAmCE,IAAA,WAAW,MAnCb;AAoCE,IAAA,iBAAiB,MApCnB;AAqCE,IAAA,EAAE,EAAC,0BArCL;AAsCE,IAAA,OAAO,EAAEX,IAtCX;AAuCE,IAAA,cAAc,EAAGc,MAAD,IAAY;AAC1B,UAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAOA,MAAP;AACD;;AACD,UAAIA,MAAM,CAACN,UAAX,EAAuB;AACrB,eAAOM,MAAM,CAACN,UAAd;AACD;;AACD,aAAOM,MAAM,CAACP,KAAd;AACD,KA/CH;AAgDE,IAAA,YAAY,EAAE,CAACS,KAAD,EAAQF,MAAR,kBAAmB,mBAAQE,KAAR;AAAA,gBAAgBF,MAAM,CAACP;AAAvB;AAAA;AAAA;AAAA;AAAA,YAhDnC;AAiDE,IAAA,QAAQ,MAjDV;AAkDE,IAAA,WAAW,EAAGG,MAAD,iBACX,QAAC,SAAD,OAAeA,MAAf;AAAuB,MAAA,KAAK,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA;AAnDJ;AAAA;AAAA;AAAA;AAAA,UADF;AAwDD,CA3DD;;GAAMX,Q;;KAAAA,Q;AA6DN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\r\n\r\nimport \"./style\";\r\nimport { ComponentProps } from \"./types\";\r\n\r\nconst filter = createFilterOptions();\r\n\r\nconst MUIInput: React.FC<ComponentProps> = ({ data }) => {\r\n  const [value, setValue] = React.useState<any>(null);\r\n\r\n  return (\r\n    <Autocomplete\r\n      value={value}\r\n      sx={{\r\n        width: \"48%\",\r\n      }}\r\n      onChange={(event, newValue) => {\r\n        if (typeof newValue === \"string\") {\r\n          setValue({\r\n            title: newValue,\r\n          });\r\n        } else if (newValue && newValue.inputValue) {\r\n          setValue({\r\n            title: newValue.inputValue,\r\n          });\r\n        } else {\r\n          setValue(newValue);\r\n        }\r\n      }}\r\n      filterOptions={(options, params) => {\r\n        const filtered = filter(options, params);\r\n\r\n        const { inputValue } = params;\r\n        const isExisting = options.some(\r\n          (option) => inputValue === option.title\r\n        );\r\n        if (inputValue !== \"\" && !isExisting) {\r\n          filtered.push({\r\n            inputValue,\r\n            title: `Add \"${inputValue}\"`,\r\n          });\r\n        }\r\n\r\n        return filtered;\r\n      }}\r\n      selectOnFocus\r\n      clearOnBlur\r\n      handleHomeEndKeys\r\n      id=\"free-solo-with-text-demo\"\r\n      options={data}\r\n      getOptionLabel={(option) => {\r\n        if (typeof option === \"string\") {\r\n          return option;\r\n        }\r\n        if (option.inputValue) {\r\n          return option.inputValue;\r\n        }\r\n        return option.title;\r\n      }}\r\n      renderOption={(props, option) => <li {...props}>{option.title}</li>}\r\n      freeSolo\r\n      renderInput={(params) => (\r\n        <TextField {...params} label=\"Free solo with text demo\" />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MUIInput;\r\n"]},"metadata":{},"sourceType":"module"}